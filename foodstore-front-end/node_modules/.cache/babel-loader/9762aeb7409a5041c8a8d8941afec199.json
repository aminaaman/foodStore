{"ast":null,"code":"import _defineProperty from \"/Users/Amina/Desktop/FoodApp/foodstore-front-end/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Amina/Desktop/FoodApp/foodstore-front-end/src/containers/PlaceOrder/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Header from '../../components/Header/Header';\nimport './style.css';\nimport NormalInput from '../../components/UI/NormalInput';\nimport * as authActions from '../../store/actions/authActions';\nimport { connect } from 'react-redux';\nimport AddressForm from './AddressForm';\nimport CartPrice from '../../components/CartPrice';\nimport DeliveryAddress from './DeliveryAddress';\nimport RadioButton from '../../components/UI/RadioButton';\nimport * as cartActions from '../../store/actions/cartActions';\nimport { base_url } from '../../constants';\n\nclass PlaceOrder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      addresses: [],\n      address: {\n        fullName: \"\",\n        mobileNumber: \"\",\n        pinCode: \"\",\n        locality: \"\",\n        address: \"\",\n        cityDistrictTown: \"\",\n        state: \"\",\n        landmark: \"\",\n        alternatePhoneNumber: \"\"\n      },\n      order: [],\n      selectedAddress: '',\n      existingAddress: false,\n      newAddress: false,\n      isAddressConfirm: false,\n      isOrderConfirm: false,\n      selectedPaymentType: 'cod',\n      paymentTypes: [{\n        id: 1,\n        value: 'card',\n        label: 'Credit Card / Debit Card / ATM Card',\n        isActive: false\n      }, {\n        id: 2,\n        value: 'netBanking',\n        label: 'Net Banking',\n        isActive: false\n      }, {\n        id: 3,\n        value: 'paypal',\n        label: 'Paypal',\n        isActive: false\n      }, {\n        id: 4,\n        value: 'cod',\n        label: 'Cash on Delivery',\n        isActive: true\n      }]\n    };\n\n    this.getAddresses = () => {\n      const userId = this.props.auth.user.userId;\n      fetch(\"\".concat(base_url, \"/user/get-addresses/\") + userId, {\n        headers: {\n          'auth-token': this.props.auth.token\n        }\n      }).then(response => {\n        if (response.status == 200) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong');\n        }\n      }).then(jsonResponse => {\n        console.log(jsonResponse);\n        this.setState({\n          addresses: jsonResponse.message.address\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.inputHandler = e => {\n      const address = this.state.address;\n\n      const updatedAddress = _objectSpread({}, address, {\n        [e.target.name]: e.target.value\n      });\n\n      this.setState({\n        address: updatedAddress\n      });\n    };\n\n    this.addressSelector = e => {\n      this.setState({\n        selectedAddress: e.target.value,\n        existingAddress: true,\n        newAddress: false\n      });\n    };\n\n    this.newAddressSelection = e => {\n      this.setState({\n        selectedAddress: 'newAddressId',\n        existingAddress: false,\n        newAddress: true\n      });\n    };\n\n    this.addressSubmitHandler = e => {\n      e.preventDefault();\n      console.log(this.state.address);\n      const address = {\n        userId: this.props.auth.user.userId,\n        address: this.state.address\n      };\n      fetch(\"\".concat(base_url, \"/user/new-address\"), {\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': this.props.auth.token\n        },\n        method: 'POST',\n        body: JSON.stringify(address)\n      }).then(response => response.json()).then(jsonResponse => {\n        console.log('new address');\n        console.log(jsonResponse);\n        console.log('new address'); //this.getAddresses();\n        //console.log(jsonResponse.message);\n\n        const updatedAddressList = jsonResponse.message.address;\n        this.setState({\n          isAddressConfirm: true,\n          address: _objectSpread({}, this.state.address, {}, address.address),\n          addresses: updatedAddressList,\n          selectedAddress: updatedAddressList[updatedAddressList.length - 1]._id\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.confirmDeliveryAddress = () => {\n      this.setState({\n        isAddressConfirm: true\n      });\n    };\n\n    this.confirmOrder = () => {\n      this.setState({\n        isOrderConfirm: true\n      });\n    };\n\n    this.selectPaymentOption = e => {\n      this.setState({\n        selectedPaymentType: e.target.value\n      });\n    };\n\n    this.submitOrder = async () => {\n      if (!this.state.isOrderConfirm) {\n        return;\n      }\n\n      if (this.state.selectedPaymentType !== 'cod') {\n        return;\n      }\n\n      const order = this.props.cart.cartItem.map(item => {\n        return {\n          product: item.product,\n          price: item.price,\n          quantity: item.quantity\n        };\n      });\n\n      try {\n        const response = await fetch(\"\".concat(base_url, \"/order/create\"), {\n          headers: {\n            'Content-Type': 'application/json',\n            'auth-token': this.props.auth.token\n          },\n          body: JSON.stringify({\n            user: this.props.auth.user.userId,\n            address: this.state.selectedAddress,\n            order: order,\n            paymentType: 'COD',\n            paymentStatus: 'pending'\n          }),\n          method: 'POST'\n        });\n        const jsonResponse = await response.json();\n\n        if (response.status === 201) {\n          this.props.clearCart();\n          this.props.history.push({\n            pathname: '/thank-you',\n            search: '?orderid=' + jsonResponse.message._id,\n            state: jsonResponse.message\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.auth.isAuthenticated) {\n      this.props.getToken().then(result => {\n        if (result) {\n          this.getAddresses();\n        } else {\n          this.props.history.push('/login');\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      this.getAddresses();\n    }\n  }\n\n  render() {\n    let address;\n\n    if (this.state.isAddressConfirm && !this.state.newAddress) {\n      address = this.state.addresses.find(address => address._id === this.state.selectedAddress);\n    } else {\n      address = this.state.address;\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"PlaceOrderWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"DeliveryAddress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Login \", this.props.auth.isAuthenticated ? React.createElement(\"i\", {\n      className: \"fas fa-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }) : null), React.createElement(\"p\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Email: \", this.props.auth.user.email)), this.state.isAddressConfirm ? React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Delivery Address \", this.state.isAddressConfirm ? React.createElement(\"i\", {\n      className: \"fas fa-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }) : null), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"\".concat(address.fullName, \" - \").concat(address.mobileNumber, \" - \")), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"\".concat(address.address, \", \").concat(address.cityDistrictTown, \", \").concat(address.state, \" - \").concat(address.pinCode)))) : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Delivery Address\"), this.state.addresses.length && this.state.addresses.map(address => React.createElement(DeliveryAddress, {\n      key: address._id,\n      onAddressSelection: this.addressSelector,\n      value: this.state.selectedAddress,\n      address: address,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    })), this.state.existingAddress ? React.createElement(\"div\", {\n      className: \"DeliveryButtonContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.confirmDeliveryAddress,\n      className: \"DeliveryAddressButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Deliver Here\")) : null), React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(RadioButton, {\n      name: \"address\",\n      label: \"Add new Address\",\n      value: this.state.selectedAddress,\n      onChange: this.newAddressSelection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })), this.state.newAddress ? React.createElement(AddressForm, {\n      address: this.state.address,\n      inputHandler: this.inputHandler,\n      addressSubmitHandler: this.addressSubmitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }) : null)), this.state.isOrderConfirm ? React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Order Summary \", React.createElement(\"i\", {\n      className: \"fas fa-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), \" \")) : this.state.isAddressConfirm ? React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Order Summary \"), this.props.cart.cartItem.map(item => React.createElement(\"div\", {\n      key: item.product,\n      style: {\n        display: 'flex',\n        margin: '5px 0',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '60px',\n        height: '60px',\n        overflow: 'hidden',\n        position: 'relative'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        maxWidth: '100%',\n        maxHeight: '100%',\n        position: 'absolute',\n        left: '50%',\n        transform: 'translateX(-50%)'\n      },\n      src: item.image,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, item.name), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"Quantity : \", item.quantity), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"$\", item.total)))), React.createElement(\"button\", {\n      onClick: this.confirmOrder,\n      className: \"ContinueButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Continue\")) : null, this.state.isOrderConfirm ? React.createElement(\"div\", {\n      className: \"Card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"CardText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"Payment Option\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, this.state.paymentTypes.map(payment => React.createElement(\"li\", {\n      className: \"paymentType\",\n      key: payment.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(RadioButton, {\n      key: payment.id,\n      name: \"paymentType\",\n      label: payment.label,\n      value: payment.value,\n      onChange: this.selectPaymentOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    })))), this.state.selectedPaymentType !== 'cod' ? React.createElement(\"p\", {\n      className: \"ErrorMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"Sorry, Only Cash on Delivery is available\") : null, React.createElement(\"button\", {\n      className: \"PaymentConfirm\",\n      onClick: this.submitOrder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"Confirm Order\")) : null), React.createElement(CartPrice, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth,\n    cart: state.cart\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getToken: () => dispatch(authActions.getToken()),\n    clearCart: () => dispatch(cartActions.clearCart())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaceOrder);","map":{"version":3,"sources":["/Users/Amina/Desktop/FoodApp/foodstore-front-end/src/containers/PlaceOrder/index.js"],"names":["React","Component","Header","NormalInput","authActions","connect","AddressForm","CartPrice","DeliveryAddress","RadioButton","cartActions","base_url","PlaceOrder","state","addresses","address","fullName","mobileNumber","pinCode","locality","cityDistrictTown","landmark","alternatePhoneNumber","order","selectedAddress","existingAddress","newAddress","isAddressConfirm","isOrderConfirm","selectedPaymentType","paymentTypes","id","value","label","isActive","getAddresses","userId","props","auth","user","fetch","headers","token","then","response","status","json","Error","jsonResponse","console","log","setState","message","catch","error","inputHandler","e","updatedAddress","target","name","addressSelector","newAddressSelection","addressSubmitHandler","preventDefault","method","body","JSON","stringify","updatedAddressList","length","_id","confirmDeliveryAddress","confirmOrder","selectPaymentOption","submitOrder","cart","cartItem","map","item","product","price","quantity","paymentType","paymentStatus","clearCart","history","push","pathname","search","componentDidMount","isAuthenticated","getToken","result","render","find","email","display","margin","alignItems","width","height","overflow","position","maxWidth","maxHeight","left","transform","image","total","payment","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../../components/Header/Header';\nimport './style.css';\nimport NormalInput from '../../components/UI/NormalInput';\nimport * as authActions from '../../store/actions/authActions';\nimport { connect } from 'react-redux';\nimport AddressForm from './AddressForm';\nimport CartPrice from '../../components/CartPrice';\nimport DeliveryAddress from './DeliveryAddress';\nimport RadioButton from '../../components/UI/RadioButton';\nimport * as cartActions from '../../store/actions/cartActions';\nimport { base_url } from '../../constants';\n\nclass PlaceOrder extends Component{\n\n    state = {\n        addresses: [],\n        address: {\n            fullName: \"\",\n            mobileNumber: \"\",\n            pinCode: \"\",\n            locality: \"\",\n            address: \"\",\n            cityDistrictTown: \"\",\n            state: \"\",\n            landmark: \"\",\n            alternatePhoneNumber: \"\"\n        },\n        order: [],\n        selectedAddress: '',\n        existingAddress: false,\n        newAddress: false,\n        isAddressConfirm: false,\n        isOrderConfirm: false,\n        selectedPaymentType: 'cod',\n        paymentTypes: [\n            {id: 1, value: 'card', label: 'Credit Card / Debit Card / ATM Card', isActive: false},\n            {id: 2, value: 'netBanking', label: 'Net Banking', isActive: false},\n            {id: 3, value: 'paypal', label: 'Paypal', isActive: false},\n            {id: 4, value: 'cod', label: 'Cash on Delivery', isActive: true},\n        ]\n    }\n\n    componentDidMount() {\n        if(!this.props.auth.isAuthenticated){\n            this.props.getToken()\n            .then(result => {\n                if(result){\n\n                    this.getAddresses();\n\n                }else{\n                    this.props.history.push('/login');\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n        }else{\n            this.getAddresses();\n        }\n    }\n\n    getAddresses = () => {\n        const userId = this.props.auth.user.userId;\n        fetch(`${base_url}/user/get-addresses/`+userId, {\n            headers: {\n                'auth-token': this.props.auth.token\n            }\n        })\n        .then(response => {\n            if(response.status == 200){\n                return response.json();\n            }else{\n                throw new Error('Something went wrong');\n            }\n        })\n        .then(jsonResponse => {\n            console.log(jsonResponse)\n            this.setState({\n                addresses: jsonResponse.message.address\n            })\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    }\n\n    inputHandler = (e) => {\n        const address = this.state.address;\n        const updatedAddress = {\n            ...address,\n            [e.target.name] :  e.target.value\n        };\n        this.setState({\n            address: updatedAddress\n        })\n    }\n\n    addressSelector = (e) => {\n\n        this.setState({\n            selectedAddress: e.target.value,\n            existingAddress: true,\n            newAddress: false\n        });\n\n    }\n\n    newAddressSelection = (e) => {\n        this.setState({\n            selectedAddress: 'newAddressId',\n            existingAddress: false,\n            newAddress: true\n        });\n    }\n\n    addressSubmitHandler = (e) => {\n        e.preventDefault();\n        console.log(this.state.address)\n\n        const address = {\n            userId: this.props.auth.user.userId,\n            address: this.state.address\n        }\n\n       fetch(`${base_url}/user/new-address`, {\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': this.props.auth.token\n            },\n            method: 'POST',\n            body: JSON.stringify(address)\n       })\n       .then(response => response.json())\n       .then(jsonResponse => {\n           console.log('new address');\n           console.log(jsonResponse);\n           console.log('new address');\n          \n           //this.getAddresses();\n           //console.log(jsonResponse.message);\n           const updatedAddressList = jsonResponse.message.address;\n           this.setState({\n                isAddressConfirm: true,\n                address: {\n                    ...this.state.address,\n                    ...address.address\n                },\n                addresses: updatedAddressList,\n                selectedAddress: updatedAddressList[updatedAddressList.length - 1]._id\n            });\n           \n       })\n       .catch(error => {\n           console.log(error);\n       })\n    }\n\n    confirmDeliveryAddress = () => {\n        this.setState({\n            isAddressConfirm: true\n        });\n\n    }\n\n    confirmOrder = () => {\n        this.setState({\n            isOrderConfirm: true\n        })\n    }\n\n    selectPaymentOption = (e) => {\n        this.setState({\n            selectedPaymentType: e.target.value\n        })\n    }\n\n    submitOrder = async () => {\n\n        if(!this.state.isOrderConfirm){\n            return;\n        }\n\n        if(this.state.selectedPaymentType !== 'cod'){\n            return;\n        }\n        \n        const order = this.props.cart.cartItem.map(item => {\n            return {\n                product: item.product,\n                price: item.price,\n                quantity: item.quantity\n            }\n        });\n\n        try{\n\n            const response = await fetch(`${base_url}/order/create`,{\n                headers: {\n                    'Content-Type': 'application/json',\n                    'auth-token': this.props.auth.token\n                },\n                body: JSON.stringify({\n                    user: this.props.auth.user.userId,\n                    address: this.state.selectedAddress,\n                    order: order,\n                    paymentType: 'COD',\n                    paymentStatus: 'pending'\n                }),\n                method: 'POST'\n            });\n\n            const jsonResponse = await response.json();\n            if(response.status === 201){\n                this.props.clearCart();\n                this.props.history.push({\n                    pathname: '/thank-you',\n                    search: '?orderid='+jsonResponse.message._id,\n                    state: jsonResponse.message\n                });\n            }\n\n        }catch(error){\n            console.log(error);\n        }\n        \n    }\n\n    render() {\n\n        let address;\n        if(this.state.isAddressConfirm && !this.state.newAddress){\n            address = this.state.addresses.find(address => address._id === this.state.selectedAddress);\n        }else{\n            address = this.state.address;\n        }\n\n        return (\n            <React.Fragment>\n                <Header />\n                <div className=\"Content\">\n                    <div className=\"PlaceOrderWrapper\">\n\n                        \n                        <div className=\"DeliveryAddress\">\n\n                            <div className=\"Card\">\n                                <p className=\"CardText\">Login {this.props.auth.isAuthenticated ? <i className=\"fas fa-check\"></i> : null}</p>\n                                <p className=\"CardText\">Email: {this.props.auth.user.email}</p>\n                            </div>\n\n                            {\n                                this.state.isAddressConfirm ? \n                                 <div className=\"Card\">\n                                     <p className=\"CardText\">Delivery Address {this.state.isAddressConfirm ? <i className=\"fas fa-check\"></i> : null}</p>\n                                     <p>\n                                        <span>{`${address.fullName} - ${address.mobileNumber} - `}</span>\n                                        <span>{ `${address.address}, ${address.cityDistrictTown}, ${address.state} - ${address.pinCode}`}</span>\n                                        </p>\n                                 </div> :\n                                 <React.Fragment>\n                                <div className=\"Card\">\n                                    <h4>Delivery Address</h4>\n                                    {\n                                        this.state.addresses.length && this.state.addresses.map(address => \n                                            <DeliveryAddress \n                                                key={address._id} \n                                                onAddressSelection={this.addressSelector} \n                                                value={this.state.selectedAddress}\n                                                address={address} />\n                                        )\n                                    }\n                                    {\n                                        this.state.existingAddress ?\n                                        <div className=\"DeliveryButtonContainer\" >\n                                            <button onClick={this.confirmDeliveryAddress} className=\"DeliveryAddressButton\">Deliver Here</button>\n                                        </div> : null\n                                    }\n                                    \n                                </div>\n                                <div className=\"Card\">\n                                    <div>\n                                        <RadioButton \n                                            name=\"address\"\n                                            label=\"Add new Address\"\n                                            value={this.state.selectedAddress}\n                                            onChange={this.newAddressSelection}\n                                        />\n                                    </div>\n                                    {\n                                        this.state.newAddress ? \n                                            <AddressForm\n                                                address={this.state.address}\n                                                inputHandler={this.inputHandler}\n                                                addressSubmitHandler={this.addressSubmitHandler}\n                                            /> : null\n                                    }\n                                    \n                                    \n                                </div>\n                                </React.Fragment>\n                            }\n                            \n                               \n\n                                {\n                                    this.state.isOrderConfirm ? \n                                    <div className=\"Card\">\n                                        <p className=\"CardText\">Order Summary <i className=\"fas fa-check\"></i> </p>\n                                    </div> : \n                                    this.state.isAddressConfirm ? \n                                    <div className=\"Card\">\n                                        <h4 className=\"CardText\">Order Summary </h4>\n                                        {\n                                            this.props.cart.cartItem.map(item => (\n                                                <div key={item.product} style={{display: 'flex', margin: '5px 0', alignItems: 'center'}}>\n                                                    <div style={{width: '60px', height: '60px', overflow: 'hidden', position: 'relative'}}>\n                                                        <img style={{maxWidth: '100%', maxHeight: '100%', position: 'absolute', left: '50%', transform: 'translateX(-50%)'}} src={item.image} alt=\"\" />\n                                                    </div>\n                                                    <div>\n                                                        <h5>{item.name}</h5>\n                                                        <h6>Quantity : {item.quantity}</h6>\n                                                        <h6>${item.total}</h6>\n                                                    </div>\n                                                </div>\n                                            ))\n                                        }\n                                        <button onClick={this.confirmOrder} className=\"ContinueButton\">Continue</button>\n                                    </div>\n                                 : null\n                                }\n                                \n                                {\n                                    this.state.isOrderConfirm ? \n                                    <div className=\"Card\">\n                                    <h4 className=\"CardText\">Payment Option</h4>\n                                    <ul>\n                                        {\n                                            this.state.paymentTypes.map(payment => \n                                            <li className=\"paymentType\" key={payment.id}>\n                                                <RadioButton\n                                                    key={payment.id} \n                                                    name=\"paymentType\"\n                                                    label={payment.label}\n                                                    value={payment.value}\n                                                    onChange={this.selectPaymentOption}\n                                                />\n                                            </li>)\n                                        }\n                                    </ul>\n                                    {\n                                        this.state.selectedPaymentType !== 'cod' ? \n                                        <p className=\"ErrorMessage\">Sorry, Only Cash on Delivery is available</p> : null\n                                    }\n                                    <button className=\"PaymentConfirm\" onClick={this.submitOrder}>Confirm Order</button>\n\n                                </div> : null\n                                }\n                              \n                                \n\n                            \n\n                            \n\n\n\n                            </div>\n\n                                <CartPrice />\n\n                            \n                    </div>\n\n                    \n                   \n                </div>\n                \n            </React.Fragment>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        auth: state.auth,\n        cart: state.cart\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getToken: () => dispatch(authActions.getToken()),\n        clearCart: () => dispatch(cartActions.clearCart())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaceOrder);"]},"metadata":{},"sourceType":"module"}