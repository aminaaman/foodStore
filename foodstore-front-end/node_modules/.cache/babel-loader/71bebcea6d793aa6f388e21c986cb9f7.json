{"ast":null,"code":"import _defineProperty from \"/Users/Amina/Desktop/FoodApp/foodstore-front-end/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_TO_CART, GET_CART_DETAILS, UPDATE_CART, CLEAR_CART } from \"../actions/cartActions\";\nconst initState = {\n  cartItem: [],\n  totalAmount: 0,\n  cartCount: 0\n};\n\nconst cartReducers = (state = initState, actions) => {\n  switch (actions.type) {\n    case ADD_TO_CART:\n      const cartItem = state.cartItem;\n      let updatedCartItem = [];\n      let totalAmount;\n      const itemCount = state.cartItem.filter(item => item.product === actions.cartItem.product);\n\n      if (itemCount.length === 0) {\n        updatedCartItem = [...cartItem, {\n          product: actions.cartItem.product,\n          name: actions.cartItem.name,\n          image: actions.cartItem.image,\n          price: actions.cartItem.price,\n          quantity: actions.cartItem.quantity,\n          total: actions.cartItem.quantity * actions.cartItem.price\n        }];\n      } else {\n        updatedCartItem = cartItem.map(item => item.product === actions.cartItem.product ? _objectSpread({}, item, {\n          quantity: item.quantity + actions.cartItem.quantity,\n          total: item.total + actions.cartItem.price\n        }) : item);\n      }\n\n      totalAmount = state.totalAmount + actions.cartItem.price;\n      state = {\n        cartItem: updatedCartItem,\n        totalAmount: totalAmount,\n        cartCount: state.cartCount + 1\n      };\n      break;\n\n    case GET_CART_DETAILS:\n      const cItem = actions.cartItems.cart;\n      let totalAmt = 0;\n      let quantityCount = 0;\n      const updateCartItem = cItem.map(item => {\n        totalAmt += item.total;\n        quantityCount += item.quantity;\n        return {\n          product: item.product._id,\n          name: item.product.name,\n          image: item.product.productPic[0].img,\n          price: item.price,\n          quantity: item.quantity,\n          total: item.total\n        };\n      });\n      state = {\n        cartItem: updateCartItem,\n        totalAmount: totalAmt,\n        cartCount: quantityCount\n      };\n      break;\n\n    case UPDATE_CART:\n      const updateItem = actions.item;\n      const cartItems = state.cartItem.map(item => {\n        return item.product === updateItem.productId ? _objectSpread({}, item, {\n          quantity: updateItem.quantity,\n          total: updateItem.total\n        }) : item;\n      });\n      state = {\n        cartItem: cartItems,\n        totalAmount: parseFloat(state.totalAmount) + parseFloat(updateItem.price * updateItem.newQuantity),\n        cartCount: parseInt(state.cartCount) + parseInt(updateItem.newQuantity)\n      };\n      break;\n\n    case CLEAR_CART:\n      state = {\n        cartItem: [],\n        totalAmount: 0,\n        cartCount: 0\n      };\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nexport default cartReducers;","map":{"version":3,"sources":["/Users/Amina/Desktop/FoodApp/foodstore-front-end/src/store/reducers/cartReducers.js"],"names":["ADD_TO_CART","GET_CART_DETAILS","UPDATE_CART","CLEAR_CART","initState","cartItem","totalAmount","cartCount","cartReducers","state","actions","type","updatedCartItem","itemCount","filter","item","product","length","name","image","price","quantity","total","map","cItem","cartItems","cart","totalAmt","quantityCount","updateCartItem","_id","productPic","img","updateItem","productId","parseFloat","newQuantity","parseInt"],"mappings":"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","sourcesContent":["import { ADD_TO_CART, GET_CART_DETAILS, UPDATE_CART, CLEAR_CART } from \"../actions/cartActions\"\n\nconst initState = {\n    cartItem: [],\n    totalAmount: 0,\n    cartCount: 0\n}\n\nconst cartReducers = (state = initState, actions) => {\n    switch(actions.type){\n        case ADD_TO_CART:\n            const cartItem = state.cartItem;\n            let updatedCartItem = [];\n            let totalAmount;\n\n            const itemCount = state.cartItem.filter(item => item.product === actions.cartItem.product);\n\n            if(itemCount.length === 0){\n                updatedCartItem = [\n                    ...cartItem,\n                    {\n                        product: actions.cartItem.product,\n                        name: actions.cartItem.name,\n                        image: actions.cartItem.image,\n                        price: actions.cartItem.price,\n                        quantity: actions.cartItem.quantity,\n                        total: actions.cartItem.quantity * actions.cartItem.price\n                    }\n                ];\n            }else{\n                updatedCartItem = cartItem.map(item => \n                    item.product === actions.cartItem.product ?\n                    {\n                        ...item,\n                        quantity: item.quantity + actions.cartItem.quantity,\n                        total: item.total + actions.cartItem.price\n                    } : item\n                    )\n            }\n            totalAmount = state.totalAmount + actions.cartItem.price\n            state = {\n                cartItem: updatedCartItem,\n                totalAmount: totalAmount,\n                cartCount: state.cartCount + 1\n            }\n            break;\n        case GET_CART_DETAILS:\n            const cItem = actions.cartItems.cart;\n            let totalAmt = 0;\n            let quantityCount = 0;\n            const updateCartItem = cItem.map(item => {\n                totalAmt += item.total;\n                quantityCount += item.quantity;\n                return {\n                    product: item.product._id,\n                    name: item.product.name,\n                    image: item.product.productPic[0].img,\n                    price: item.price,\n                    quantity: item.quantity,\n                    total: item.total\n                }\n            })\n            state = {\n                cartItem: updateCartItem,\n                totalAmount: totalAmt,\n                cartCount: quantityCount\n            }\n            break;\n        case UPDATE_CART:\n            const updateItem = actions.item;\n            const cartItems = state.cartItem.map(item => {\n                return item.product === updateItem.productId ? \n                {\n                    ...item,\n                    quantity: updateItem.quantity,\n                    total: updateItem.total\n                } : item\n            });\n            state = {\n                cartItem: cartItems,\n                totalAmount: parseFloat(state.totalAmount) + parseFloat(updateItem.price * updateItem.newQuantity),\n                cartCount: parseInt(state.cartCount) + parseInt(updateItem.newQuantity)\n            }\n            break;\n        case CLEAR_CART:\n            state = {\n                cartItem: [],\n                totalAmount: 0,\n                cartCount: 0\n            }\n        default:\n            break;\n    }\n\n    return state;\n}\n\nexport default cartReducers;"]},"metadata":{},"sourceType":"module"}