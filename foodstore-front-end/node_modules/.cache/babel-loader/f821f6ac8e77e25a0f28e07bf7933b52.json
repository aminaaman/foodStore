{"ast":null,"code":"import { base_url } from \"../../constants\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const GET_CART_DETAILS = 'GET_CART_DETAILS';\nexport const UPDATE_CART = 'UPDATE_CART';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const addToCart = (token, cartItem) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"\".concat(base_url, \"/cart/add\"), {\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': token\n        },\n        body: JSON.stringify(cartItem),\n        method: 'POST'\n      });\n      const jsonResposne = await response.json();\n\n      if (response.status === 201) {\n        dispatch({\n          type: ADD_TO_CART,\n          cartItem: cartItem\n        });\n      }\n\n      return jsonResposne;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const getCartItems = (token, userId) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"\".concat(base_url, \"/cart/user/\").concat(userId), {\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': token\n        },\n        method: 'POST'\n      });\n      const jsonResposne = await response.json();\n\n      if (response.status === 200) {\n        dispatch({\n          type: GET_CART_DETAILS,\n          cartItems: jsonResposne.message[0]\n        });\n      }\n\n      return jsonResposne.message[0];\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const updateCart = (token, userId, product) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"\".concat(base_url, \"/cart/update/quantity\"), {\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': token\n        },\n        method: 'PUT',\n        body: JSON.stringify({\n          userId: userId,\n          productId: product.productId,\n          quantity: product.quantity,\n          total: product.total\n        })\n      });\n      const jsonResposne = await response.json();\n\n      if (response.status === 201) {\n        dispatch({\n          type: UPDATE_CART,\n          item: product\n        });\n      }\n\n      return jsonResposne.message;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const clearCart = () => {\n  return dispatch => {\n    dispatch({\n      type: CLEAR_CART,\n      payload: null\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Amina/Desktop/FoodApp/mystore-front-end/src/store/actions/cartActions.js"],"names":["base_url","ADD_TO_CART","GET_CART_DETAILS","UPDATE_CART","CLEAR_CART","addToCart","token","cartItem","dispatch","response","fetch","headers","body","JSON","stringify","method","jsonResposne","json","status","type","error","console","log","getCartItems","userId","cartItems","message","updateCart","product","productId","quantity","total","item","clearCart","payload"],"mappings":"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","sourcesContent":["import { base_url } from \"../../constants\";\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const GET_CART_DETAILS = 'GET_CART_DETAILS';\nexport const UPDATE_CART = 'UPDATE_CART';\nexport const CLEAR_CART = 'CLEAR_CART';\n\nexport const addToCart = (token, cartItem) => {\n    return async dispatch => {\n        try{\n            const response = await fetch(`${base_url}/cart/add`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'auth-token': token\n                },\n                body: JSON.stringify(cartItem),\n                method: 'POST'\n            });\n            const jsonResposne = await response.json();\n            if(response.status === 201){\n                dispatch({\n                    type: ADD_TO_CART,\n                    cartItem: cartItem\n                });\n            }\n\n            return jsonResposne;\n        }catch(error){\n            console.log(error);\n        }\n    }\n}\n\nexport const getCartItems = (token, userId) => {\n    return async dispatch => {\n\n        try{\n\n            const response = await fetch(`${base_url}/cart/user/${userId}`, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'auth-token': token\n                },\n                method: 'POST'\n            });\n\n            const jsonResposne = await response.json();\n            if(response.status === 200){\n                dispatch({\n                    type: GET_CART_DETAILS,\n                    cartItems: jsonResposne.message[0]\n                });\n            }\n\n            return jsonResposne.message[0];\n\n        }catch(error){\n            console.log(error);\n        }\n        \n    }\n}\n\nexport const updateCart = (token, userId, product) => {\n    return async dispatch => {\n        try{\n\n            const response = await fetch(`${base_url}/cart/update/quantity`,{\n                headers: {\n                    'Content-Type': 'application/json',\n                    'auth-token': token\n                },\n                method: 'PUT',\n                body: JSON.stringify({\n                    userId: userId,\n                    productId: product.productId,\n                    quantity: product.quantity,\n                    total: product.total\n                })\n            });\n            const jsonResposne = await response.json();\n\n            if(response.status === 201){\n                dispatch({\n                    type: UPDATE_CART,\n                    item: product\n                });\n            }\n\n            return jsonResposne.message;\n\n\n        }catch(error){\n            console.log(error);\n        }\n    }\n}\n\nexport const clearCart = () => {\n    return dispatch => {\n        dispatch({\n            type: CLEAR_CART,\n            payload: null\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}