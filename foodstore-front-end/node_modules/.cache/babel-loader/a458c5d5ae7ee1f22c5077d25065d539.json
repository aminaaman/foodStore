{"ast":null,"code":"import _defineProperty from \"/Users/Amina/Desktop/FoodApp/mystore-front-end/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Amina/Desktop/FoodApp/mystore-front-end/src/containers/Cart/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Header from '../../components/Header/Header';\nimport './style.css';\nimport CartItem from './CartItem';\nimport * as cartActions from '../../store/actions/cartActions';\nimport * as authActions from '../../store/actions/authActions';\nimport { connect } from 'react-redux';\nimport CartPrice from '../../components/CartPrice';\n\nclass Cart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cartItems: []\n    };\n\n    this.decreaseQuantity = (e, productId) => {\n      this.updateCart(productId, -1);\n    };\n\n    this.increaseQuantity = (e, productId) => {\n      this.updateCart(productId, 1);\n    };\n\n    this.updateCart = async (productId, quantity) => {\n      try {\n        const auth = this.props.auth;\n        let product = this.state.cartItems.find(item => item.product === productId);\n        product = {\n          productId: product.product,\n          quantity: parseInt(product.quantity) + parseInt(quantity),\n          newQuantity: quantity,\n          price: product.price,\n          total: parseFloat(product.total) + parseFloat(product.price * quantity)\n        };\n\n        if (product.quantity <= 0) {\n          return;\n        }\n\n        const response = await this.props.updateCart(auth.token, auth.user.userId, product);\n\n        if (response.ok == 1) {\n          const cartItems = this.state.cartItems;\n          this.setState({\n            cartItems: cartItems.map(item => item.product === productId ? _objectSpread({}, item, {\n              quantity: item.quantity + quantity,\n              total: item.total + item.price * quantity\n            }) : item)\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.changeQuantity = (e, productId) => {// console.log(e.target.value);\n      // if(isNaN(e.target.value)){\n      //     return;\n      // }\n      // const firstDigit = parseInt(e.target.value.split(\"\")[0]);\n      // if(firstDigit === 0){\n      //     return;\n      // }\n      // //alert(e.target.value);\n      // this.updateCart(productId, parseInt(e.target.value));\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.auth.isAuthenticated) {\n      this.props.getToken().then(result => {\n        if (result) {\n          const cartItems = this.props.getCartItems(this.props.auth.token, this.props.auth.user.userId);\n          return cartItems;\n        }\n\n        return [];\n      }).then(cartItems => {\n        if (cartItems.cart.length > 0) {\n          console.log(this.props.cart);\n          this.setState({\n            cartItems: this.props.cart.cartItem\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      this.setState({\n        cartItems: this.props.cart.cartItem\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"CartWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"CartDetails\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"CardTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"My Cart\")), React.createElement(\"div\", {\n      className: \"CardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.state.cartItems.map(product => React.createElement(CartItem, {\n      key: product.product,\n      productId: product.product,\n      name: product.name,\n      image: product.image,\n      price: product.price,\n      quantity: product.quantity,\n      total: product.total //name=\"quantity\" \n      ,\n      changeQuantity: this.changeQuantity,\n      increaseQuantity: this.increaseQuantity,\n      decreaseQuantity: this.decreaseQuantity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"PlaceOrder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"PlaceOrderButton\",\n      onClick: () => this.props.history.push('/place-order'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Place Order\")))), React.createElement(CartPrice, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth,\n    cart: state.cart\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCartItems: (token, userId) => dispatch(cartActions.getCartItems(token, userId)),\n    updateCart: (token, userId, product) => dispatch(cartActions.updateCart(token, userId, product)),\n    getToken: () => dispatch(authActions.getToken())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","map":{"version":3,"sources":["/Users/Amina/Desktop/FoodApp/mystore-front-end/src/containers/Cart/index.js"],"names":["React","Component","Header","CartItem","cartActions","authActions","connect","CartPrice","Cart","state","cartItems","decreaseQuantity","e","productId","updateCart","increaseQuantity","quantity","auth","props","product","find","item","parseInt","newQuantity","price","total","parseFloat","response","token","user","userId","ok","setState","map","error","console","log","changeQuantity","componentDidMount","isAuthenticated","getToken","then","result","getCartItems","cart","length","cartItem","catch","render","name","image","history","push","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../../components/Header/Header';\nimport './style.css';\nimport CartItem from './CartItem';\nimport * as cartActions from '../../store/actions/cartActions';\nimport * as authActions from '../../store/actions/authActions';\nimport { connect } from 'react-redux';\nimport CartPrice from '../../components/CartPrice';\n\nclass Cart extends Component{\n\n    state = {\n        cartItems: []\n    }\n\n    decreaseQuantity = (e, productId) => {\n        this.updateCart(productId, -1);\n    }\n\n    increaseQuantity = (e, productId) => {\n        this.updateCart(productId, 1);\n    }\n\n    updateCart = async (productId, quantity) => {\n        try{\n            const auth = this.props.auth;\n            let product = this.state.cartItems.find(item => item.product === productId);\n            product = {\n                productId: product.product,\n                quantity: parseInt(product.quantity) + parseInt(quantity),\n                newQuantity: quantity,\n                price: product.price,\n                total: parseFloat(product.total) + parseFloat( product.price * quantity )\n            }\n            if(product.quantity <= 0){\n                return;\n            }\n            const response = await this.props.updateCart(auth.token, auth.user.userId, product);\n            if(response.ok == 1){\n                const {cartItems} = this.state;\n                this.setState({\n                    cartItems: cartItems.map(item => item.product === productId ? \n                        {...item, quantity: item.quantity + quantity, total: item.total + (item.price * quantity)}: item)\n                })\n            }\n        }catch(error){\n            console.log(error);\n        }\n        \n    }\n\n    changeQuantity = (e, productId) => {\n\n        // console.log(e.target.value);\n\n        // if(isNaN(e.target.value)){\n        //     return;\n        // }\n\n        // const firstDigit = parseInt(e.target.value.split(\"\")[0]);\n        // if(firstDigit === 0){\n        //     return;\n        // }\n\n        // //alert(e.target.value);\n\n        // this.updateCart(productId, parseInt(e.target.value));\n    }\n\n    componentDidMount() {\n        if(!this.props.auth.isAuthenticated){\n            this.props.getToken()\n            .then(result => {\n                if(result){\n                    const cartItems = this.props.getCartItems(this.props.auth.token, this.props.auth.user.userId);\n                    return cartItems;\n                }\n                return [];\n            })\n            .then(cartItems => {\n                if(cartItems.cart.length > 0){\n\n                    console.log(this.props.cart)\n\n                    this.setState({\n                        cartItems: this.props.cart.cartItem\n                    })\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n        }else{\n            this.setState({\n                cartItems: this.props.cart.cartItem\n            })\n        }\n    }\n\n    render (){\n\n        return (\n            <React.Fragment>\n                <Header />\n                <div className=\"Content\">\n                    <div className=\"CartWrapper\">\n                        <div className=\"CartDetails\">\n                            {/* List cart items */}\n                            <div className=\"CardTitle\">\n                                <h3>My Cart</h3>\n                            </div>\n                            <div className=\"CardBody\">\n\n                                {\n                                    this.state.cartItems.map(product => \n                                        <CartItem\n                                            key={product.product}\n                                            productId={product.product}\n                                            name={product.name}\n                                            image={product.image}\n                                            price={product.price}\n                                            quantity={product.quantity}\n                                            total={product.total}\n                                            //name=\"quantity\" \n                                            changeQuantity={this.changeQuantity}\n                                            increaseQuantity={this.increaseQuantity}\n                                            decreaseQuantity={this.decreaseQuantity}\n                                    />)\n                                }\n                                \n\n                                <div className=\"PlaceOrder\">\n                                    <button className=\"PlaceOrderButton\" onClick={() => this.props.history.push('/place-order')}>Place Order</button>\n                                </div>\n\n                            </div>\n                        </div>\n                        \n                        <CartPrice />\n\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        auth: state.auth,\n        cart: state.cart\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getCartItems: (token, userId) => dispatch(cartActions.getCartItems(token, userId)),\n        updateCart: (token, userId, product) => dispatch(cartActions.updateCart(token, userId, product)),\n        getToken: () => dispatch(authActions.getToken())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);"]},"metadata":{},"sourceType":"module"}